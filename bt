#include <iostream>
using namespace std;

// Step 1: Define the Node structure
struct Node {
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize node
    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

// Step 2: Inorder Traversal (Left → Root → Right)
void inorder(Node* root) {
    if (root == nullptr) return;

    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

// Step 3: Preorder Traversal (Root → Left → Right)
void preorder(Node* root) {
    if (root == nullptr) return;

    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}

// Step 4: Postorder Traversal (Left → Right → Root)
void postorder(Node* root) {
    if (root == nullptr) return;

    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

int main() {
    // Step 5: Create tree nodes manually
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);

    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);

    // Tree structure:
    //         1
    //       /   \
    //     2       3
    //    / \     / \
    //   4   5   6   7

    // Step 6: Display traversals
    cout << "Inorder Traversal: ";
    inorder(root);
    cout << endl;

    cout << "Preorder Traversal: ";
    preorder(root);
    cout << endl;

    cout << "Postorder Traversal: ";
    postorder(root);
    cout << endl;

    return 0;
}
