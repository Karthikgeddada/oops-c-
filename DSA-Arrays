//73. Set Matrix Zeroes

class Solution {
public:
 void setZeroes(vector<vector<int>> & matrix){
bool firstRow = false, firstCol = false;
int m = matrix.size(), n = matrix[0].size();

for(int i =0; i< m ; i++){
    for(int j =0; j<n; j++){
      if(matrix[i][j] == 0){
              if( i  == 0 ) firstRow = true;
              if( j == 0 ) firstCol = true;
              matrix[0][j] = 0;
              matrix[i][0] = 0;
          }
      }
}
for(int i = 1; i< m; i++){
  for(int j = 1; j< n ;j++){
    if( matrix[i][0] == 0 || matrix[0][j] == 0){
        matrix[i][j] = 0;
    }
}
}

if(firstRow){
 for(int j =0; j<n; j++){
matrix[0][j] = 0;
}
}
if(firstCol){
for(int i =0; i<m; i++){
matrix[i][0] = 0;
}
}
}
};


ðŸ‘‘56. Merge Intervals


vector<vector<int>> merge(const vector<vector<int>>& intervals) {
    if (intervals.empty()) return {};

    vector<vector<int>> sorted = intervals;
    sort(sorted.begin(), sorted.end()); // Sort by start time

    vector<vector<int>> merged;
    merged.push_back(sorted[0]);

    for (int i = 1; i < sorted.size(); ++i) {
        if (sorted[i][0] <= merged.back()[1]) {
            // Overlap: merge intervals
            merged.back()[1] = max(merged.back()[1], sorted[i][1]);
        } else {
            merged.push_back(sorted[i]);
        }
    }

    return merged;
}


ðŸ”¥ 2105. Watering Plants II

class Solution {
public:
    int minimumRefill(vector<int>& plants, int capacityA, int capacityB) {
        int canA = capacityA, canB = capacityB;
        int i = 0, j = plants.size() - 1;
        int refillA = 0, refillB = 0;

        while (i < j) {
            if (canA < plants[i]) {
                refillA++;
                canA = capacityA;
            }
            if (canB < plants[j]) {
                refillB++;
                canB = capacityB;
            }
            canA -= plants[i];
            canB -= plants[j];
            i++;
            j--;
        }

        // If there's a middle plant
        if (i == j) {
            if (canA < plants[i] && canB < plants[i]) {
                refillA++; // Alice has priority
            }
        }

        return refillA + refillB;
    }
};

ðŸ”¥ Leetcode 219. Contains Duplicate II â€” Hash Map + Index Tracking Approach
class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        unordered_map<int, int> lastseenindex;

        for (int i = 0; i < nums.size(); ++i) {
            if (lastseenindex.find(nums[i]) != lastseenindex.end()) {
                if (i - lastseenindex[nums[i]] <= k) {
                    return true;
                }
            }

            // Update the index of the current element
            lastseenindex[nums[i]] = i;
        }

        return false; // No such pair found
    }
};




















